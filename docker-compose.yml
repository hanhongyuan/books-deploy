version: '3'

services:

  api:
    image: vitalcode/books-api
    networks:
      - events-network
    ports: # remove
      - 8083:8083
    environment:
      - PSQL_HOST=postgres
      - PSQL_PORT=5432
      - PSQL_NAME=events
      - PSQL_USER=user
      - PSQL_PASSWORD=development
      - ES_URL=elasticsearch://elasticsearch:9300
      - ES_INDEX=lisenok
      - ES_TYPE=events
      - ES_CLUSTER=robotic
    entrypoint: dockerize -wait tcp://postgres:5432 -wait http://elasticsearch:9200 -timeout 360s bin/books-api
    depends_on:
      - postgres
      - elasticsearch
      - elasticsearch-data
    deploy:
      mode: global
      placement:
        constraints: [node.role == worker]

  web: # use dockerize -wait
    image: vitalcode/books-web
    networks:
      - events-network
    ports:
      - 8000:80
    depends_on:
      - api
    deploy:
      mode: global
      placement:
        constraints: [node.role == worker]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.4.3
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - events-network
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - cluster.name=robotic
      - xpack.security.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - bootstrap.memory_lock=true
      - node.master=true
      - node.data=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.zen.ping.unicast.hosts=elasticsearch
      - discovery.zen.ping.multicast.enabled=false
      - iscovery.zen.minimum_master_nodes=1
      - network.publish_host=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
      placement:
        constraints: [node.role == manager]

  elasticsearch-data:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.4.3
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - events-network
    environment:
      - cluster.name=robotic
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - node.master=false
      - node.data=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.zen.ping.unicast.hosts=elasticsearch
      - discovery.zen.ping.multicast.enabled=false
      - iscovery.zen.minimum_master_nodes=1
      - network.publish_host=$${HOSTNAME}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
      mode: global
      placement:
        constraints: [node.role == worker]

  postgres:
    image: vitalcode/events-postgres
    ports: # remove
      - 5400:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data/pgdata
    networks:
      - events-network
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=development
      - POSTGRES_USER=user
      - POSTGRES_DB=events
      - EVENTS_APP_USER=${EVENTS_APP_USER}
      - EVENTS_APP_PASSWORD=${EVENTS_APP_PASSWORD}
    deploy:
      labels:
        [uk.vitalcode.events.role=database]
      placement:
        constraints: [node.role == manager]

  graphiql:
    image: vitalcode/auth-graphiql:0.3.1
    ports: # remove
      - 3083:3000
    networks:
      - events-network
    depends_on:
      - api
    deploy:
      mode: global
      placement:
        constraints: [node.role == worker]

  head:
    image: mobz/elasticsearch-head:5
    networks:
      - events-network
    ports: # remove
      - 9100:9100
    depends_on:
      - elasticsearch

  visualizer:
    image: dockersamples/visualizer:stable
    ports: # remove
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - HOST=localhost
    networks:
      - events-network
    deploy:
      placement:
        constraints: [node.role == manager]

  logspout:
    image: vitalcode/events-logspout-logstash
    ports:
      - 8010:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOGSPOUT=ignore
    networks:
      - events-network
    command: syslog://logstash:5000
    deploy:
      mode: global
    depends_on:
      - logstash

  logstash:
    image: vitalcode/events-logstash
    environment:
      - LOGSPOUT=ignore
    networks:
      - events-network
    deploy:
      placement:
        constraints: [node.role == manager]
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:5.3.1
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOGSPOUT=ignore
    networks:
      - events-network
    deploy:
      placement:
        constraints: [node.role == manager]
    depends_on:
      - elasticsearch

networks:
  events-network:

volumes:
  postgres-data:
  elastic-data:
